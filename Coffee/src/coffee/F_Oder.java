/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coffee;

import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author nguye
 */
public class F_Oder extends javax.swing.JFrame {

    /**
     * Creates new form F_Oder
     */
    public F_Oder(String id) {
        initComponents();
        idAccount = id;
        showDataInTableCategories(tblCatOrder);
        showDataInTableProductsForStatus(tblProductOrder);

    }
    private String idAccount = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel14 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCatOrder = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblProductOrder = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblListOrder = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        txtGiamGia = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        txtPhaiTra = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtKhachDua = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtTraLai = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        btnClearAll = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnAcceptSale = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 51, 51));
        jLabel14.setText("Danh Mục Món");

        tblCatOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tên Danh Mục"
            }
        ));
        tblCatOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCatOrderMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblCatOrder);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 51));
        jLabel15.setText("Danh Sách Món");

        tblProductOrder = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tblProductOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tên Món", "Giá Bán", "Danh Mục"
            }
        ));
        tblProductOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductOrderMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblProductOrder);

        tblListOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên Món", "Số Lượng", "Đơn Giá", "Thành Ttiền"
            }
        ));
        jScrollPane6.setViewportView(tblListOrder);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel16.setText("Tổng Tiền:");
        jLabel16.setToolTipText("");

        txtGiamGia.setText("0");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel17.setText("Giảm Giá:");
        jLabel17.setToolTipText("");

        txtTotal.setText("0");
        txtTotal.setEnabled(false);

        txtPhaiTra.setBackground(new java.awt.Color(204, 204, 204));
        txtPhaiTra.setForeground(new java.awt.Color(255, 0, 51));
        txtPhaiTra.setText("0");
        txtPhaiTra.setEnabled(false);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 51, 51));
        jLabel18.setText("Phải Trả:");
        jLabel18.setToolTipText("");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel19.setText("Khách Đưa:");
        jLabel19.setToolTipText("");

        txtKhachDua.setText("0");
        txtKhachDua.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKhachDuaKeyPressed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel20.setText("Trả Lại:");
        jLabel20.setToolTipText("");

        txtTraLai.setText("0");
        txtTraLai.setEnabled(false);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel25.setText("VND");
        jLabel25.setToolTipText("");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel24.setText("VND");
        jLabel24.setToolTipText("");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel23.setText("VND");
        jLabel23.setToolTipText("");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel22.setText("%");
        jLabel22.setToolTipText("");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel21.setText("VND");
        jLabel21.setToolTipText("");

        btnClearAll.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnClearAll.setText("Xóa hết");
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnRemove.setText("Bớt Món");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAcceptSale.setBackground(new java.awt.Color(0, 102, 255));
        btnAcceptSale.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnAcceptSale.setForeground(new java.awt.Color(255, 255, 255));
        btnAcceptSale.setText("Áp Dụng");
        btnAcceptSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptSaleActionPerformed(evt);
            }
        });

        btnSubmit.setBackground(new java.awt.Color(255, 0, 0));
        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Thanh Toán");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addComponent(jScrollPane5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel19))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTotal)
                                    .addComponent(txtPhaiTra)
                                    .addComponent(txtKhachDua)
                                    .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel23)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTraLai, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel25)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAcceptSale, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnClearAll)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemove))
                            .addComponent(btnSubmit))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnRemove)
                                    .addComponent(btnClearAll))
                                .addGap(18, 18, 18)
                                .addComponent(btnAcceptSale)
                                .addGap(35, 35, 35)
                                .addComponent(btnSubmit))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel21)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel22)
                                    .addComponent(txtGiamGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel23)
                                    .addComponent(txtPhaiTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel24)
                                    .addComponent(txtKhachDua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel25)
                                    .addComponent(txtTraLai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblCatOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCatOrderMouseClicked
        // TODO add your handling code here:
        int i = tblCatOrder.getSelectedRow();
        TableModel model = tblCatOrder.getModel();
        showDataInTableProductsForIDCat(model.getValueAt(i, 0).toString());
    }//GEN-LAST:event_tblCatOrderMouseClicked

    private void tblProductOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductOrderMouseClicked
        // TODO add your handling code here:
        System.out.println("start");
        DefaultTableModel tblModel = (DefaultTableModel) tblListOrder.getModel();
        for (int j = 0; j < listOrder.size(); j++) {
            System.out.println(listOrder.get(j).getProductName() + " " + listOrder.get(j).getSL() + "" + " " + listOrder.get(j).getPrice() + " " + listOrder.get(j).getTotal() + "");
        }
        if (evt.getClickCount() == 2) {
            int i = tblProductOrder.getSelectedRow();
            TableModel model = tblProductOrder.getModel();
            boolean isCheck = checkExits(listOrder, model.getValueAt(i, 1).toString());
            int index = indexOfString(listOrder, model.getValueAt(i, 1).toString());
            if (listOrder.size() > 0) {
                System.out.println(isCheck);
                System.out.println(index);
                if (isCheck) {
                    listOrder.set(index, new listOrder(model.getValueAt(i, 0).toString(), model.getValueAt(i, 1).toString(), listOrder.get(index).getSL() + 1, Integer.parseInt(model.getValueAt(i, 2).toString()), ((listOrder.get(index).getSL() + 1) * Integer.parseInt(model.getValueAt(i, 2).toString()))));
                } else {
                    Set<listOrder> tmp = new HashSet<>();
                    tmp.add(new listOrder(model.getValueAt(i, 0).toString(), model.getValueAt(i, 1).toString(), 1, Integer.parseInt(model.getValueAt(i, 2).toString()), Integer.parseInt(model.getValueAt(i, 2).toString())));
                    listOrder.addAll(0, tmp);
                }
            } else {
                listOrder.add(new listOrder(model.getValueAt(i, 0).toString(), model.getValueAt(i, 1).toString(), 1, Integer.parseInt(model.getValueAt(i, 2).toString()), Integer.parseInt(model.getValueAt(i, 2).toString())));
            }

        }
        tblModel.setRowCount(0);
        int total = 0;
        for (int j = 0; j < listOrder.size(); j++) {
            String tbData[] = {listOrder.get(j).getProductName(), listOrder.get(j).getSL() + "", listOrder.get(j).getPrice() + "", listOrder.get(j).getTotal() + ""};
            tblModel.addRow(tbData);
            total += listOrder.get(j).getTotal();
        }
        txtTotal.setText(total + "");
        txtPhaiTra.setText(total + "");
    }//GEN-LAST:event_tblProductOrderMouseClicked

    private void txtKhachDuaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKhachDuaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtTraLai.setText((Integer.parseInt(txtKhachDua.getText()) - Integer.parseInt(txtPhaiTra.getText())) + "");
        }
    }//GEN-LAST:event_txtKhachDuaKeyPressed

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        // TODO add your handling code here:
        if (listOrder.size() > 0) {
            listOrder.clear();
            DefaultTableModel tblModel = (DefaultTableModel) tblListOrder.getModel();
            tblModel.setRowCount(0);
            txtTotal.setText("0");
            txtPhaiTra.setText("0");
            txtGiamGia.setText("0");
            txtKhachDua.setText("0");
        } else {
            JOptionPane.showMessageDialog(null, "Danh Sách Khách Order Đang Trống");
        }
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int i = tblListOrder.getSelectedRow();
        if (i >= 0) {
            listOrder.remove(i);
            DefaultTableModel tblModel = (DefaultTableModel) tblListOrder.getModel();
            tblModel.setRowCount(0);
            int total = 0;
            for (int j = 0; j < listOrder.size(); j++) {
                String tbData[] = {listOrder.get(j).getProductName(), listOrder.get(j).getSL() + "", listOrder.get(j).getPrice() + "", listOrder.get(j).getTotal() + ""};
                tblModel.addRow(tbData);
                total += listOrder.get(j).getTotal();
            }
            txtTotal.setText(total + "");
            txtPhaiTra.setText(total + "");
        } else {
            JOptionPane.showMessageDialog(null, "Vui Lòng Chọn Món Cần Bớt");
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAcceptSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptSaleActionPerformed
        // TODO add your handling code here:
        int giamGia = Integer.parseInt(txtGiamGia.getText());
        int tong = Integer.parseInt(txtTotal.getText());
        txtPhaiTra.setText((tong - (tong * giamGia / 100)) + "");
    }//GEN-LAST:event_btnAcceptSaleActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("ddMMyyyyHHmmss");
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String idHoaDon = dtf.format(now);
        String ngayNhap = dtf2.format(now);
        int SL = 0;
        for (int j = 0; j < listOrder.size(); j++) {
            SL += listOrder.get(j).getSL();
        }
        PreparedStatement ps;

        String query = "INSERT INTO `hoadon`(`idHoaDon`, `ngayLap`, `idAccount`, `SL`, `tamTinh`, `giamGia`, `tongTien`) VALUES (?,?,?,?,?,?,?)";

        String queryAddCTHD = "INSERT INTO `cthd`(`idHoaDon`, `idProduct`, `SL`, `TongTien`) VALUES (?,?,?,?)";

        try {
            ps = Data.DatabaseInfo.getConnection().prepareStatement(query);
            ps.setString(1, idHoaDon);
            ps.setString(2, ngayNhap);
            ps.setString(3, "1");
            ps.setString(4, SL + "");
            ps.setString(5, txtPhaiTra.getText());
            ps.setString(6, txtGiamGia.getText());
            ps.setString(7, txtPhaiTra.getText());
            for (int j = 0; j < listOrder.size(); j++) {
                System.out.println("co thuc hien");
                PreparedStatement ps2;
                ps2 = Data.DatabaseInfo.getConnection().prepareStatement(queryAddCTHD);
                ps2.setString(1, idHoaDon);
                ps2.setString(2, listOrder.get(j).getId());
                ps2.setString(3, listOrder.get(j).getSL() + "");
                ps2.setString(4, listOrder.get(j).getTotal() + "");
                if (ps2.executeUpdate() > 0) {
                }
            }
            if (ps.executeUpdate() > 0) {
                listOrder.clear();
                DefaultTableModel tblModel = (DefaultTableModel) tblListOrder.getModel();
                tblModel.setRowCount(0);
                txtTotal.setText("0");
                txtPhaiTra.setText("0");
                txtGiamGia.setText("0");
                txtKhachDua.setText("0");
                JOptionPane.showMessageDialog(null, "Thanh Toán Hoàn Tất");
            }

        } catch (SQLException ex) {
            Logger.getLogger(F_Register.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed
    private String idCatSelected = "";
    private String idProductSelected = "";
    private ArrayList<listOrder> listOrder = new ArrayList<>();
    
    public boolean checkExits(ArrayList<listOrder> list, String a) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getProductName().equals(a)) {
                return true;
            }
        }
        return false;
    }

    public int indexOfString(ArrayList<listOrder> list, String a) {
        System.out.println("a " + a);
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getProductName().equals(a)) {
                System.out.println("index: " + list.get(i).getProductName().indexOf(a));
                return i;
            }
        }
        return -1;
    }
    
    public void showDataInTableProductsForIDCat(String idCat) {
        PreparedStatement ps;
        ResultSet rs;

        DefaultTableModel tblModel = (DefaultTableModel) tblProductOrder.getModel();
        tblModel.setRowCount(0);

        String query = "SELECT products.id as id, productName, categories.catName as catName, price FROM `products` INNER JOIN categories on products.catID = categories.id where status = 1 and products.catID = " + idCat;
        try {
            ps = Data.DatabaseInfo.getConnection().prepareStatement(query);

            rs = ps.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String productName = rs.getString("productName");
                String catID = rs.getString("catName");
                String price = rs.getString("price");

                String tbData[] = {id, productName, price, catID};
                tblModel.addRow(tbData);

            }

        } catch (SQLException ex) {
            Logger.getLogger(F_Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void showDataInTableProducts(JTable a) {
        PreparedStatement ps;
        ResultSet rs;

        DefaultTableModel tblModel = (DefaultTableModel) a.getModel();
        tblModel.setRowCount(0);

        String query = "SELECT products.id as id, productName, categories.catName as catName, price, status FROM `products` INNER JOIN categories on products.catID = categories.id";
        try {
            ps = Data.DatabaseInfo.getConnection().prepareStatement(query);

            rs = ps.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String productName = rs.getString("productName");
                String catID = rs.getString("catName");
                String price = rs.getString("price");
                String status = rs.getString("status");

                String tbData[] = {id, productName, price, catID, status};
                tblModel.addRow(tbData);

            }

        } catch (SQLException ex) {
            Logger.getLogger(F_Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void showDataInTableCategories(JTable a) {
        PreparedStatement ps;
        ResultSet rs;

        DefaultTableModel tblModel = (DefaultTableModel) a.getModel();
        tblModel.setRowCount(0);

        String query = "SELECT * FROM `categories`";
        try {
            ps = Data.DatabaseInfo.getConnection().prepareStatement(query);

            rs = ps.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String catName = rs.getString("catName");

                String tbData[] = {id, catName};
                tblModel.addRow(tbData);

            }

        } catch (SQLException ex) {
            Logger.getLogger(F_Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void showDataInTableProductsForStatus(JTable a) {
        PreparedStatement ps;
        ResultSet rs;

        DefaultTableModel tblModel = (DefaultTableModel) a.getModel();
        tblModel.setRowCount(0);

        String query = "SELECT products.id as id, productName, categories.catName as catName, price, status FROM `products` INNER JOIN categories on products.catID = categories.id where status = 1";
        try {
            ps = Data.DatabaseInfo.getConnection().prepareStatement(query);

            rs = ps.executeQuery();

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String productName = rs.getString("productName");
                String catID = rs.getString("catName");
                String price = rs.getString("price");
                String status = rs.getString("status");

                String tbData[] = {id, productName, price, catID, status};
                tblModel.addRow(tbData);

            }

        } catch (SQLException ex) {
            Logger.getLogger(F_Home.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(F_Oder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(F_Oder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(F_Oder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(F_Oder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new F_Oder("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptSale;
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tblCatOrder;
    private javax.swing.JTable tblListOrder;
    public javax.swing.JTable tblProductOrder;
    private javax.swing.JTextField txtGiamGia;
    private javax.swing.JTextField txtKhachDua;
    private javax.swing.JTextField txtPhaiTra;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtTraLai;
    // End of variables declaration//GEN-END:variables
}
